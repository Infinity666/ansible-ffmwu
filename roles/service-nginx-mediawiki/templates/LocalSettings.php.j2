<?php
# This file was automatically generated by the MediaWiki 1.34.0
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

## Uncomment for debug output
# error_reporting( -1 );
# ini_set( 'display_errors', 1 );

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "{{ mediawiki_name }}";
$wgMetaNamespace = "{{ mediawiki_namespace }}";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "";
$wgScriptExtension = ".php";
$wgArticlePath = "/w/$1";
$wgUsePathInfo = true;


## The protocol and server name to use in fully-qualified URLs
$wgServer = "https://{{ http_mediawiki_external }}";

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL path to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogo = "$wgResourceBasePath/resources/assets/{{ mediawiki_logo }}";

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "{{ mediawiki_contact }}";
$wgPasswordSender = "{{ mediawiki_sender }}";

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "{{ mediawiki_mysql_server }}";
$wgDBname = "{{ mediawiki_mysql_db }}";
$wgDBuser = "{{ mediawiki_mysql_user }}";
$wgDBpassword = "{{ lookup('passwordstore', inventory_hostname_short + '/mysql_' + mediawiki_mysql_user) }}";

# MySQL specific settings
$wgDBprefix = "";

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgGenerateThumbnailOnParse = false;
#$wgUseImageMagick = true;
#$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = true;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.UTF-8";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
#$wgCacheDirectory = "$IP/cache";

# Site language code, should be one of the list in ./languages/data/Names.php
$wgLanguageCode = "de";

$wgSecretKey = "{{ lookup('passwordstore', inventory_hostname_short + '/mediawiki_secret') }}";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "{{ lookup('passwordstore', inventory_hostname_short + '/mediawiki_upgrade') }}";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

# The following permissions were set based on your choice in the installer
$wgGroupPermissions['*']['edit'] = false;

# Allowed Files for upload
$wgFileExtensions = array_merge($wgFileExtensions, array('tif','tiff','svg','pdf','rtf','asc','txt','json','odt','ods','odp','ppt','pptx','doc','docx','xls','xlsx'));
$wgVerifyMimeType = false;

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'vector', 'monobook':
$wgDefaultSkin = "vector";

# Enabled skins.
# The following skins were automatically enabled:
wfLoadSkin( 'MonoBook' );
wfLoadSkin( 'Timeless' );
wfLoadSkin( 'Vector' );

# Permissions
$wgGroupPermissions['bureaucrat']['usermerge'] = true;
$wgGroupPermissions['bureaucrat']['lookupcredentials'] = false;
$wgGroupPermissions['sysop']['deleteperm'] = true;

# # ConfirmAccount settings
$wgConfirmAccountRequestFormItems['Biography']['minWords'] = 10;
$wgConfirmAccountContact = 'web@lists.freifunk-mwu.de';

# Enable subpages in all namespaces
$wgNamespacesWithSubpages = array_fill( 0, 200, true );

# Enable RegexFunctions
$wgPFEnableStringFunctions = true;

# Enable VisualEditor
$wgDefaultUserOptions['visualeditor-enable'] = true;
$wgVirtualRestConfig['modules']['parsoid'] = array(
    // URL to the Parsoid instance
    'url' => 'http://localhost:8142',
		// Parsoid "domain", see below (optional)
    'domain' => '{{ http_mediawiki_external }}',
    // Parsoid "prefix", see below (optional)
    //'prefix' => 'mediawiki'
);

# Enabled extensions. Most of the extensions are enabled by adding
# wfLoadExtensions('ExtensionName');
# to LocalSettings.php. Check specific extension documentation for more details.

{% for extension in mediawiki_extensions %}
{% if extension.type == "require" %}
require_once( "$IP/extensions/{{ extension.name }}/{{ extension.name }}.php" );
{% elif extension.type == "load" %}
wfLoadExtension( '{{ extension.name }}' );
{% endif %}
{% if extension.conf is defined %}
{{ extension.conf }}
{% endif %}
{% endfor %}
